apply plugin: 'com.android.application'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
version = "1.0.0"
group='com.github.Dragon-Boat'
android {
	compileSdkVersion 25
	buildToolsVersion "26.0.0"

	defaultConfig {
		minSdkVersion 19
		targetSdkVersion 25
		versionCode 1
		versionName "1.0"

		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

	}
	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}
}

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])
	androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
		exclude group: 'com.android.support', module: 'support-annotations'
	})
	compile 'com.android.support:appcompat-v7:25.3.1'
	compile 'com.android.support:recyclerview-v7:25.3.1'
	compile 'com.android.support.constraint:constraint-layout:1.0.2'
	testCompile 'junit:junit:4.12'
}

/*第 4 步: 生成源 JAR
为了遵守 Maven 标准，你的库也应该有一个包含了库的源文件的 JAR 文件。
 为了生成 JAR 文件，需要创建一个新的 Jar任务，
 generateSourcesJar，并且使用 from 功能指定的源文件的位置。*/
task generateSourcesJar(type: Jar) {
	from android.sourceSets.main.java.srcDirs
	classifier 'sources'
}

/*
第 5 步: 生成 Javadoc JAR
我们同样推荐，在你的库里有一个包含 Javadocs 的 JAR 文件。
 因为目前你还没有任何 Javadocs，需要创建一个新的 Javadoc 任务，generateJavadocs，来生成它们。
  使用 source 变量来指定源文件的位置。 你还应该更新 classpath 变量，以便该任务可以找到属于 Android SDK 的类。
 你可以通过把 android.getBootClasspath 方法的返回值添加给他，来这么做。
 */
task generateJavadocs(type: Javadoc) {
	source = android.sourceSets.main.java.srcDirs
	classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

/*下一步，要从 Javadocs 生成 JAR，需要创建 Jar 任务，generateJavadocsJar
，并把 generateJavadocs 的 destinationDir 属性传递给它的 from 功能。
为了确保在 generateJavadocsJar 任务只在 generateJavadocs 任务完成后才开始，
需要添加下面的代码片段，它使用了 dependsOn 方法来决定任务的顺序：
您的新任务应如下所示:*/
task generateJavadocsJar(type: Jar, dependsOn: generateJavadocs) {
	from generateJavadocs.destinationDir
	classifier 'javadoc'
}

/*
 *第 6 步: 引入生成的 JAR 文件
 *为了把源和 Javadoc JAR 文件导入到 artifacts 的列表里，你应该把他们的任务的名字添加到 configuration 里，
 * 称为 archives，artifacts 列表将被上传到 Maven 仓库。 使用下面的代码片段来完成:
 */
artifacts {
	archives generateJavadocsJar
	archives generateSourcesJar
}

